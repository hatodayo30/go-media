# versionを削除（最新のDocker Composeでは不要）
services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:15-alpine
    container_name: media-platform-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: media_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # 追加
    networks:
      - media-network
    restart: unless-stopped

  # APIサーバー（バックエンド）
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: media-platform-api
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: media_platform
      DB_SSL_MODE: disable
      DB_MAX_OPEN_CONNS: 25
      DB_MAX_IDLE_CONNS: 5
      DB_CONN_MAX_LIFETIME: 5m
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRATION: 24h
      CORS_ORIGIN: "http://localhost:3000"
      LOG_LEVEL: info
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 -O- http://localhost:8082/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - media-network
    restart: unless-stopped

  # Reactフロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: media-platform-frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8082
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      api:
        condition: service_healthy
    networks:
      - media-network
    restart: unless-stopped

  # pgAdmin（オプション）
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: media-platform-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - media-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local

networks:
  media-network:
    driver: bridge
