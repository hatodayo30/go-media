import React, { useState, useEffect, useCallback } from "react";
import { api } from "../services/api";

interface ContentActionsProps {
  contentId: number;
  size?: "small" | "medium" | "large";
  showCounts?: boolean;
}

interface ActionStats {
  goods: number; // likes → goods に変更
}

interface UserActions {
  hasGood: boolean; // hasLiked → hasGood に変更
  goodId?: number; // likeId → goodId に変更
}

const ContentActions: React.FC<ContentActionsProps> = ({
  contentId,
  size = "medium",
  showCounts = true,
}) => {
  const [stats, setStats] = useState<ActionStats>({
    goods: 0, // likes → goods に変更
  });
  const [userActions, setUserActions] = useState<UserActions>({
    hasGood: false, // hasLiked → hasGood に変更
  });
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // サイズに応じたスタイル
  const sizes = {
    small: {
      fontSize: "0.875rem",
      padding: "0.375rem 0.75rem",
      gap: "0.5rem",
      iconSize: "1rem",
    },
    medium: {
      fontSize: "1rem",
      padding: "0.5rem 1rem",
      gap: "0.75rem",
      iconSize: "1.25rem",
    },
    large: {
      fontSize: "1.125rem",
      padding: "0.75rem 1.25rem",
      gap: "1rem",
      iconSize: "1.5rem",
    },
  };

  const currentSize = sizes[size];

  const fetchActions = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      console.log(`🎯 評価データ取得: コンテンツID ${contentId}`);

      // 評価統計を取得（既存のエンドポイントを使用）
      const statsResponse = await api.getAverageRating(contentId.toString()); // 既存エンドポイント
      const statsData = statsResponse.data || statsResponse;

      console.log("📊 統計データ:", statsData); // デバッグ用

      setStats({
        goods: statsData.good_count || statsData.like_count || 0, // good_count または like_count
      });

      // ユーザーの評価状態確認（ログイン時のみ）
      if (isAuthenticated) {
        const ratingsResponse = await api.getRatingsByContent(
          contentId.toString()
        );
        const ratings =
          ratingsResponse.data?.ratings || ratingsResponse.ratings || [];

        const user = JSON.parse(localStorage.getItem("user") || "{}");
        const userId = user.id;

        if (userId) {
          const userGood = ratings.find(
            (
              r: any // userLike → userGood
            ) => r.user_id === userId && r.value === 1
          );

          setUserActions({
            hasGood: !!userGood, // hasLiked → hasGood
            goodId: userGood?.id, // likeId → goodId
          });
        }
      }
    } catch (error: any) {
      console.error("❌ アクション取得エラー:", error);

      if (error.response?.status === 404) {
        // データがない場合は正常
        setStats({ goods: 0 });
        setUserActions({ hasGood: false });
      } else {
        setError("評価データの取得に失敗しました");
      }
    } finally {
      setLoading(false);
    }
  }, [contentId, isAuthenticated]); // contentIdとisAuthenticatedを依存関係に追加

  useEffect(() => {
    const token = localStorage.getItem("token");
    setIsAuthenticated(!!token);
    fetchActions();
  }, [fetchActions]); // fetchActionsを依存関係に追加

  const handleGood = async () => {
    // handleLike → handleGood
    if (!isAuthenticated) {
      alert("評価するにはログインが必要です");
      return;
    }

    try {
      setSubmitting(true);
      setError(null);
      console.log("👍 グッド処理開始");

      if (userActions.hasGood) {
        // hasLiked → hasGood
        // グッドを取り消し（削除）
        if (userActions.goodId) {
          // likeId → goodId
          console.log("❌ グッド取り消し:", userActions.goodId);
          await api.deleteRating(userActions.goodId.toString());
          console.log("✅ グッド取り消し成功");
        }
      } else {
        // グッドを追加
        console.log("➕ グッド追加");
        await api.createOrUpdateRating(contentId, 1); // 1 = グッド
        console.log("✅ グッド追加成功");
      }

      await fetchActions();
    } catch (error: any) {
      console.error("❌ グッドエラー:", error);
      setError("グッドの処理に失敗しました"); // いいね → グッド
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div
        style={{
          display: "flex",
          gap: currentSize.gap,
          alignItems: "center",
          fontSize: currentSize.fontSize,
        }}
      >
        📊 読み込み中...
      </div>
    );
  }

  return (
    <div
      style={{
        padding: "1rem",
        border: "1px solid #e5e7eb",
        borderRadius: "8px",
        backgroundColor: "white",
      }}
    >
      {/* エラー表示 */}
      {error && (
        <div
          style={{
            backgroundColor: "#fee2e2",
            color: "#dc2626",
            padding: "0.5rem",
            borderRadius: "4px",
            marginBottom: "0.75rem",
            fontSize: "0.875rem",
          }}
        >
          ⚠️ {error}
        </div>
      )}

      {/* グッドボタンのみ */}
      <div
        style={{
          display: "flex",
          gap: currentSize.gap,
          alignItems: "center",
          justifyContent: "center",
          flexWrap: "wrap",
        }}
      >
        <button
          onClick={handleGood} // handleLike → handleGood
          disabled={submitting || !isAuthenticated}
          style={{
            display: "flex",
            alignItems: "center",
            gap: "0.375rem",
            padding: currentSize.padding,
            backgroundColor: userActions.hasGood ? "#dcfce7" : "transparent", // hasLiked → hasGood
            color: userActions.hasGood ? "#059669" : "#6b7280",
            border: `1px solid ${userActions.hasGood ? "#059669" : "#d1d5db"}`,
            borderRadius: "8px",
            fontSize: currentSize.fontSize,
            cursor: isAuthenticated ? "pointer" : "not-allowed",
            opacity: submitting ? 0.6 : 1,
            transition: "all 0.2s ease",
            fontWeight: userActions.hasGood ? "600" : "400",
          }}
          title={isAuthenticated ? "グッド" : "ログインが必要です"} // いいね → グッド
        >
          <span style={{ fontSize: currentSize.iconSize }}>
            {userActions.hasGood ? "👍" : "🤍"} {/* ❤️ → 👍 に変更 */}
          </span>
          {showCounts && <span>{stats?.goods || 0}</span>}
          <span style={{ fontSize: "0.875em" }}>グッド</span>{" "}
          {/* いいね → グッド */}
        </button>
      </div>

      {/* 認証状態の表示 */}
      {!isAuthenticated && (
        <div
          style={{
            textAlign: "center",
            marginTop: "0.75rem",
            fontSize: "0.75rem",
            color: "#6b7280",
          }}
        >
          🔒 評価するにはログインしてください
        </div>
      )}

      {/* ユーザー状態表示 */}
      {showCounts &&
        isAuthenticated &&
        userActions.hasGood && ( // hasLiked → hasGood
          <div
            style={{
              marginTop: "0.75rem",
              paddingTop: "0.75rem",
              borderTop: "1px solid #e5e7eb",
              fontSize: "0.75rem",
              color: "#6b7280",
              textAlign: "center",
            }}
          >
            <span>👍 あなたがグッドしました</span>{" "}
            {/* ❤️ → 👍, いいね → グッド */}
          </div>
        )}
    </div>
  );
};

export default ContentActions;